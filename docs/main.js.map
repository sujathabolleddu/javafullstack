{"version":3,"sources":["./src/app/javascript/javascript.component.ts","./src/app/javascript/javascript.component.html","./src/app/kafka/kafka.component.ts","./src/app/kafka/kafka.component.html","./src/app/bootstrap/bootstrap.component.ts","./src/app/bootstrap/bootstrap.component.html","./src/app/apitesting/apitesting.component.ts","./src/app/apitesting/apitesting.component.html","./src/environments/environment.ts","./src/app/javalogging/javalogging.component.ts","./src/app/javalogging/javalogging.component.html","./src/app/welcome/welcome.component.ts","./src/app/welcome/welcome.component.html","./src/app/springboot/springboot.component.ts","./src/app/springboot/springboot.component.html","./src/app/multithreading/multithreading.component.ts","./src/app/multithreading/multithreading.component.html","./src/app/solid/solid.component.ts","./src/app/solid/solid.component.html","./src/app/rest/rest.component.ts","./src/app/rest/rest.component.html","./src/app/json/json.component.ts","./src/app/json/json.component.html","./src/app/security/security.component.ts","./src/app/security/security.component.html","./src/app/css/css.component.ts","./src/app/css/css.component.html","./src/app/java/java.component.ts","./src/app/java/java.component.html","./src/app/sonarqube/sonarqube.component.ts","./src/app/sonarqube/sonarqube.component.html","./src/app/html5/html5.component.ts","./src/app/html5/html5.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/veracode/veracode.component.ts","./src/app/veracode/veracode.component.html","./src/app/app.module.ts","./src/app/codereview/codereview.component.ts","./src/app/codereview/codereview.component.html","./src/app/gitlab/gitlab.component.ts","./src/app/gitlab/gitlab.component.html","./src/app/aws/aws.component.ts","./src/app/aws/aws.component.html","./src/app/javaio/javaio.component.ts","./src/app/javaio/javaio.component.html","./src/app/designpatterns/designpatterns.component.ts","./src/app/designpatterns/designpatterns.component.html","./src/app/angular/angular.component.ts","./src/app/angular/angular.component.html","./src/app/microservices/microservices.component.ts","./src/app/microservices/microservices.component.html","./src/app/testing/testing.component.ts","./src/app/testing/testing.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-javascript',\n  templateUrl: './javascript.component.html',\n  styleUrls: ['./javascript.component.css']\n})\nexport class JavascriptComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    <b>\n        Closure\n    </b>\n    function bound together with its lexical scope forms a closure, access to its par\n\n    function bound together with its surrounding state or scope\n\n    Uses:\n    Module Design Pattern\n    Currying\n    Functions like once\n    memoize\n    mainatain state in async world\n    setTimeouts\n    Iterators\n    <b>SetTimeout - calls when timer is complete</b>\n    <b>let has a clock scope</b>\n    <b>Throttling</b>\n    Rate limiting a called\n    call is passed to the same function only after the set limit is crossed, even when you make the call multiple times within this time\n    write a throttle function, which takes limit as parameter\n    call the function with a setTimeout\n\n\n    apply and call are similar functions which setthis (context of a function).\n    <b>call</b>method takes the arguments separated by comma\n    <b>apply</b>method takes the arguments as array of arguments\n    <b>bind</b>\n\n    call(obj), bind(obj), apply(obj)\n\n    <b>Debouncing</b>\n    only call method, when the difference between two calls is executed - on an --Event\n\n\n    difference\n    Make a call after certain amunt of time, for Throttling - Throttling tells us the maximum number of times a function can be called over a period of time\n    Make a call when there is difference of simetime between two evenets - for example after pause \n    Debouncing means that a function will not be called again until a certain amount of time has passed without it being called\n    --make a call when difference is so much\n\n    Throttling -- you decide how many times youshould call within a specified timer\n    Debouncing - you decide the minimum gap between two calls\n    \n    <b>Hoisting</b>\n\n\n    Use noscript tag if you want to show message to the non javascript supported browsers after script tag\n\nIf JS has to run on some event, include in head section\nInclude in body, if script needs to be run when the page loads, no functions\n<!--In an external file <script type = “text/javascript” src = filename< </script>-->\nScope of variables, global scope, local scope\n\n\n\n</pre>>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-kafka',\n  templateUrl: './kafka.component.html',\n  styleUrls: ['./kafka.component.css']\n})\nexport class KafkaComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Kafka\nProducer\nConsumer\nBroker\nCluster\nTopic\nPartitions\nOffset\nConsumer groups\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bootstrap',\n  templateUrl: './bootstrap.component.html',\n  styleUrls: ['./bootstrap.component.css']\n})\nexport class BootstrapComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>bootstrap works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-apitesting',\n  templateUrl: './apitesting.component.html',\n  styleUrls: ['./apitesting.component.css']\n})\nexport class ApitestingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    HttpCLient \nHttpClient is a low level client for simplifying Http Communication\nHTTP protocol interception\nSecure HTTP connections - SSL/TLS\nHTTP proxy server handling\nHandles HTTP cookies\nConnection pooling for different hosts, keep alive strategy,\nmulti-threaded request execution\nRest Assured \nsimplified testing of REST based services built over HTTP\nValidating REST API response using inbuilt Hemcrest Matchers\nJSON & XML serialization and deserialization\nExtracting JSON data using JsonPath and XML data using XmlPath\nVerifying response body, cookies, headers, content-type and http status\nAuthentication using Basic Auth, Digest Auth, Form Authentication (CSRF support), OAuth (OAuth1 and OAuth2)\nverifying multi-part form data\nRequest and response logging for easy troubleshooting\nSession Filters\nSpring Mock Mvc Module\nSpring Web Test Client Module\nKotlin support\n\n\nRestAssured.baseURI = url + \"/\" + tid;\n        StringBuilder authorization = new StringBuilder();\n        authorization.append(usr).append(\":\").append(pwd);\n        String authHeader = \"Basic \" + Base64.getEncoder().encodeToString(authorization.toString().getBytes());\n\n        RequestSpecification httpRequest = RestAssured.given().header(\"Authorization\", authHeader)\n                .header(\"Content-Type\", \"application/json\")\n                .header(\"Accept\", \"application/vnd.dsttechnologies.awd+xml\");\n        Response response = httpRequest.request(Method.GET);\n\n\nRest Template\nRestTemplate is also a high level REST client which uses HttpClient under the hood, but it is mostly used in development rather than testing. It lacks most of the testing related features readily available in REST Assured like - Assertion capabilities - inbuilt Hemcrest matchers support, ease of use from testing perspective, out of the box support for various authentication protocols, ease of logging requests response, measuring request time, etc.\nSpring Webclient\nSpring WebClient was introduced in Spring Boot 2 for reactive programming. It has following advantages over conventional RestTemplate:\nIt is non-blocking & reactive in nature, so you can achieve more throughput with limited threads. This should definitely reduce the hardware requirements.\nIt has more functional feel. WebClient has a functional, fluent API with reactive types for declarative composition.\nIt has all the features that RestTemplate has to offer in cloud native environment (Load balancing, token relay, oauth2 handling, etc.)\n\nhttps://www.javacodemonk.com/rest-assured-vs-apache-httpclient-and-resttemplate-b50fa3b5\n\n</pre>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-javalogging',\n  templateUrl: './javalogging.component.html',\n  styleUrls: ['./javalogging.component.css']\n})\nexport class JavaloggingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>Java Logging\n    Components\n    •\tLogger - object responsible for capturing log records\n    •\tLogging Handlers or Appender\n    •\tLogging Formatters or Layouts\n    Types of Handler – custom by extending Handler class\n    •\tStreamHandler – to output stream\n    •\tConsoleHandler – console\n    •\tFileHandler – file in xml format\n    •\tSocketHandler – remote TCP ports\n    •\tMemoryHandler – in memory\n    Formatters – custome by extending Formatter\n    •\tSimpleFormatter – (console )text\n    •\tXMLFormatter – (file)  xml\n    Logging levels\n    •\tNine levels , seven standard , two special. Higher values – high prioirities\n    •\tFINEST - 300\n    •\tFINER - 400\n    •\tFINE - 500\n    •\tConfig - 700\n    •\tINFO – 800\n    •\tWARNING – 900\n    •\tSEVERE – 1000\n    •\tOFF – Integer.MAX_VALUE – turns off\n    •\tALL – Integer.MIN_VALUE – captures everything\n    Logger.setLevel(Logger.INFO);\n    Logger.log(Level.INFO, “message”);\n    Logger.INFO(“message”)\n    Filter\n    There can be an optional filter, where LogRecord is its parameter to isLoggable, \n    LOGGER.setFilter(new FilterExample()); - set on a class\n    Override  public boolean isLoggable(LogRecord record) to filter messages\n    Record has getMessage method\n    Logging frameworks\n    •\tLog4J\n    •\tLog4J2\n    •\tSLF4J – Simple Logging Façade for Java\n    •\tLogback\n    •\ttinyLog\n    •\tPreferred , Logback is default in Spring Boot\n    •\tLog4J is old ,go for Log4J2\n    •\tLogback uses SLF4j\n    •\t\n    •\tlogback-core, slf4j-api\n    •\tlogback-classic dependency for runtime\n    •\tprivate static final Logger  logger = LoggerFactory.logger(classname)\n    •\tconfiguration file logback.xml  in classpath\n    </pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.css']\n})\nexport class WelcomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","Welcome!\n ","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-springboot',\n  templateUrl: './springboot.component.html',\n  styleUrls: ['./springboot.component.css']\n})\nexport class SpringbootComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    <img src = \"../../assets/spboot.PNG\" alt=\"Spring Boot Pic\">\n    @SpringBootApplication\n= @EnableAutoConfiguration+ @ComponentScan + @Configuration\nScheduling\n\n<b>Key components</b>\nCLI, Auto configuration, starters, actuators\n\n\nUse Request Mapping if you have to send any parameters\nactuators include auditing, health, CPU usage, HTTP hits, and metric gathering, and many more that are automatically applied to your application.\nTo enable actuator , add actuator starter dependency\nApi'end points in actuator\nHealth\nInfo\nBeans\nMappings\nConfigprops\nHttptrace\nHeapdump\nThreaddump\nShutdown\n\n\nDebugging logs can be enabled in three ways -\n\nWe can start the application with --debug switch.\n<b>We can set the logging.level.root=debug property in application.property file.</b>\nWe can set the logging level of the root logger to debug in the supplied logging configuration file.\n\n<b>DI</b>\nSetter Injection\nConstructor Injection\nField Injection\n\n<b> Disbale autoconfiguration</b>\nusing exclude or\nspring.autoconfigure.exclude property in applc.properties\n\n<b>Register a Custom Auto-Configuration</b>\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=com.baeldung.autoconfigure.CustomAutoConfiguration\nplace it under resources/META-INF/spring.factories file\n\nTo instruct an auto-configuration class to back off when a bean already exists, we can use the @ConditionalOnMissingBean annotation.\n\nspring-boot-maven-plugin - package as jar with all dependencies and embedded server\n\nfor War\nmention packaging tag as War\nand define the scope of starter-tomcat to provided\n\nSpring Boot provides support for external configuration, allowing us to run the same application in various environments. We can use properties files, YAML files, environment variables, system properties and command-line option arguments to specify configuration properties.\n\nWe can then gain access to those properties using the @Value annotation, a bound object via the @ConfigurationProperties annotation, or the Environment abstraction.\n\n\n\n<b>IOC container</b>\nFramework which implements automatic dependency injection, manages object creation, life cycle of bean and injects dependencies into class\n\n@Scheduled(cron = \"$ flower schedule.cron \")\n@Scheduled(fixedRate = 1000)\n@Scheduled(fixedDelay = 1000, initialDelay = 1000)\n\nInternal configurations in application-properties\nExternal via command line or VM arguments\nin yaml files\nuse spring profile to give different properties to diff environments\n-DSpring.profiles.active = dev in VM arguments\n\nDeploy as jar or War.\n\nembedded containers \nTomact, Jetty, Undertow\n\nto add others, exclude tomcat and add other dependencies\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-multithreading',\n  templateUrl: './multithreading.component.html',\n  styleUrls: ['./multithreading.component.css']\n})\nexport class MultithreadingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Os contains processes\nProcess contains Threads\nEach process can have only one thread running at a time\n\nLifecycle of a Thread\nNew, Runnable, Running(Non existent), Non Runnable(Block), Terminated\nCreate a Thread Instance, Start a thread, Picked yp by thread schedular and running, (wait, sleep etc), once run method is executed\n\nCreation of Threads\nThread can be created in two types\nExtend Thread class – M extends Thread have one run method , in main method M a = new M(), a.start()\nImplement Runnable Interface\nM class implements Runnable, have one run method\nM a = new M()\nThread b = new Thread(a), b.start()\nThread Scheduler\n\nPart of JVM that decides which thread should run\nPreemptive scheduling – higher priority task runs until it eneters wait\nTime slicing Scheduling – predefined slice of time and gets back to ready, then next thread starts based on prio\n\nThread Pooling\n\nIf we create many threads , OS may run out of system level threads\nOr each thread gets very less time for execution\nThread Pool Pattern helps to save resources in multithreaded app\nWe write concurrent code in form of parallel tasks and submit execution it to the instance of thread pool\nInstance controls the threads to execute these tasks\nTask Submitters – create and submit tasks\nExecutor service – contains Task Queue and Thread pool, returns a future object for fine tuning the result\nCan take a runnable or callable object as input thread for execution\n\nExecutors, when the fine tuning of result is not required\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-solid',\n  templateUrl: './solid.component.html',\n  styleUrls: ['./solid.component.css']\n})\nexport class SolidComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Single Responsibility Principle\na class should only have one responsibility. Furthermore, it should only have one reason to change\nTesting, Lower coupling, Organization\nOpen closed Principle\nOpen for Extension, Closed for Modification\nclasses should be open for extension but closed for modification. In doing so, we stop ourselves from modifying existing code and causing potential new bugs\nLiskov Substitution Principle\nif class A is a subtype of class B, we should be able to replace B with A without disrupting the behavior of our program.\nInterface segregation Principle\nlarger interfaces should be split into smaller ones. By doing so, we can ensure that implementing classes only need to be concerned about the methods that are of interest to them.\nDependency Injection\nThe principle of dependency inversion refers to the decoupling of software modules. This way, instead of high-level modules depending on low-level modules, both will depend on abstractions.\n\nDRY – Don’t repeat yourself\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-rest',\n  templateUrl: './rest.component.html',\n  styleUrls: ['./rest.component.css']\n})\nexport class RestComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Jersey\n\nJAX-RS Implementation – Jersey, RestEasy\nAnnotations\n@Path(“/hello”)\n@GET\n@Produces(MEDIA_TYPE.)\n@PathParam\n@FormParam\n@QueryParam\n@HeaderParam\n@CookieParam\nTesting jersey\nOrg.glassfish.jersey.client.ClientConfig\n\nJavax.ws.rx.client. Client, ClientBuilder, WebTarget, UriBuilder\n\nClientConfig config = new ClientConfig();\nClient client = ClientBuilder.newClient(config)\nWebTarget target = client.traget(getBaseUri);\n\nJersey servlet : org.glassfish.jersey.servlet.ServletContainer\n1.\t   init-param\n    2.\t        param-name>jersey.config.server.provider.packages param-name\n    3.\t        param-value>com.javatpoint.rest param-value  \n    4.\t    init-param\n\n    Response object building \nResponse.status(200)  .entity(\"getDate is called, year/month/day : \" + date)    .build();  \n  ResponseBuilder response = Response.ok((Object) file);  \nresponse.header(\"Content-Disposition\",\"attachment; filename=\\\"javatpoint_file.txt\\\"\");  \n        return response.build();  \n        Spring Rest\n        @RestController - @Controller plus @ResponseBody – no need on each method\n        @GetMapping\n        @PostMapping – accepts @RequestBody(“/pathname”)\n        Object create(@RequestBody Object obj)\n        @PutMapping\n        @DeleteMapping(“/pathname/ flower brace id”)\n        Void delete(@PathVariable Integer id)\n        @RequestParam – optional parameters – required = false\n        ErrorHandling\n\n        @GetMapping and @PostMapping if there are no parameters\n        For parameters, use @RequestMapping\nTwo types of error messages\nHTTP status codes\nText messages\nJSON Messages\nErrorMessage classes\n\nResponse Entity – can send a happy path and exception path\n@ExceptionHandler – can handle exceptions – return error message – can use in same class in a different method\nWhen exceptions are routed to a different class, annotate with\n@ControllerAdvice – global exception handling – send error message\nAnd has @ExceptionHandler\n\nResponseEntity(object, HTTPStatus)\nValidation\nValidate in model,annotate constraints properties, add @valid on input ,Method ArgumentNotValidException\n@NotNull,@AssertTreue,@Max,@Min,@size,@Digits,@Pattern,@NotEmpty, @NotBlank(Nowhitespaces),@Positive,@Negative,@Email,@Past,@Future\nTesting\nData Layer testing\n@DataJpaTest\n@WebMvcTest on class\n\n@MockBean\nAutowire MockMvc\nHTTP Status codes\n\n1XX – Informational\n2xx – Success\n3xx- Redirection\n4xx- Client errors\n5xx- Server errors\n<img src=\"../../assets/pic1.png\" alt=\"Test\">\n                \n    \n \n\n</pre>>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-json',\n  templateUrl: './json.component.html',\n  styleUrls: ['./json.component.css']\n})\nexport class JsonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    @JsonProperty(“First”)\n@JsonIgnore\n@JsonIgnoreProperties\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonManagedReference - parent child relation\n@JsonBackReference – child parent relation\n@Embeddable in child class and @Embedded in the composing class\nFor list of objects\n@OneToMany(cascade = CascadeType.All)\n\nIf @ManyToOne and @OneToMany is used in same class, use @Json..reference\n\n</pre>>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-security',\n  templateUrl: './security.component.html',\n  styleUrls: ['./security.component.css']\n})\nexport class SecurityComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Security\nOpenID Connect\nOAuth 2.0\nJWT\nKeycloak\nKong API\n\n\n\nSecurity Design Considerations\nAuthentication\nAuthorization\nTransport Protection\nJust use HTTPS from browser to backend service, or back to backend service calls\nUses SSL protocol – Secured Socket layer(Old)\nNew is TLS – Transport layer security\nSSL Certificates are used \nCross origin Resource sharing(CORS)\nBrowsers restrict client side code in being able to make http requests to any site other than site that client code came from\nHeaders – Access-Control-Allow-Origin\nCross site request forgery(CSRF)\nWhen using cookies\nForms authentication to secure sessions cookies\nToken based protocols eliminate this\nCross site Scripting(XSS)\n\nTake direct input from user as string and inject it directly into DOM\nIf input contains expressions or script block, it will get executed or setup event handlers\nAngular sanitizes inputs in data binding and escape script blocks\n\nSecuring on client side\nRouteGuards\nFilter data\nPage navigation restrictions\nHide/Disable actions\nSecure on server side to filter data\nControl access to api’s\n\nOpenID Connect\nAssumes you will use oauth for authorization\nSame JWT token format\nStandardizes flows for collecting credentials from client and issuing tokens\nOauth2\nAuthorization\n\nIdentity Provider\nAuthetication server\nAuthorization server\nSSO Server\nSTS – security token service\nUser Agent\nPiece of software the user is interacting with, client app or OS\nClient\nResource\nScope\nJWT\n\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-css',\n  templateUrl: './css.component.html',\n  styleUrls: ['./css.component.css']\n})\nexport class CssComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n\n    display : inline\ndispaly : inline-block\n\nbox model\nThe way elements are looked at by the browser \n\nis box\nmargin-> border-->padding --> width and height\n\n\nCOlumn layout\n\nfloat\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-java',\n  templateUrl: './java.component.html',\n  styleUrls: ['./java.component.css']\n})\nexport class JavaComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class =\"row\">\n<div class = \"col-md-2\">\n\n<ul>\n    <li >\n        <a [routerLink] = \"['designpatterns']\">Design Patterns</a>\n    </li>\n    <li>\n        <a [routerLink] = \"['multithreading']\">MultiThreading</a>\n    </li>\n    <li>\n        <a [routerLink] = \"['javaio']\">Java IO</a>\n    </li>\n</ul>\n</div>\n<div class = \"col-md-10\">\n<router-outlet></router-outlet>\n</div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sonarqube',\n  templateUrl: './sonarqube.component.html',\n  styleUrls: ['./sonarqube.component.css']\n})\nexport class SonarqubeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Codecoverage tool to check the unit test coverage\napply the Gradle Jacoco plugin to your project and run a SonarQube scan to generate a code coverage report\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-html5',\n  templateUrl: './html5.component.html',\n  styleUrls: ['./html5.component.css']\n})\nexport class Html5Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>html5 works!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'fullstackdeveloperjava';\n}\n","<div>\n  <nav class = 'navbar navbar-expand navbar-light bg-light'>   \n  <ul class = 'nav nav-pills'>\n    <li><a class = 'nav-link' [routerLink] = \"['/java']\">Java</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">OOPS</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Collections</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Algorithms</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Exception Handling</a></li>\n    \n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">JDBC</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Servlets</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Reflection</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">RegularExpressions</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Generics</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">JVM</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Serialization</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Java XML</a></li>\n    <li><a class = 'nav-link' routerLink = \"/angular\">Angular</a></li>\n    <li><a class = 'nav-link' routerLink = \"/html5\">HTML5</a></li>\n    <li><a class = 'nav-link' routerLink = \"/javascript\">Javascript</a></li>\n    <li><a class = 'nav-link' routerLink = \"/css\">CSS</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Bootstrap</a></li>\n    <li><a class = 'nav-link' routerLink = \"/microservices\">Microservices</a></li>\n    <li><a class = 'nav-link' routerLink = \"/javalogging\">Java Logging</a></li>\n    <li><a class = 'nav-link' routerLink = \"/aws\">AWS</a></li>\n    <li><a class = 'nav-link' routerLink = \"/gitlab\">GitLab</a></li>\n    <li><a class = 'nav-link' routerLink = \"/veracode\">Veracode</a></li>\n    <li><a class = 'nav-link' routerLink = \"/sonarqube\">sonarqube</a></li>\n    <li><a class = 'nav-link' routerLink = \"/apitesting\">Api Testing</a></li>\n    <li><a class = 'nav-link' routerLink = \"/solid\">SOLID</a></li>\n    <li><a class = 'nav-link' routerLink = \"/codereview\">Code Review</a></li>\n    <li><a class = 'nav-link' routerLink = \"designpatterns\">Design Patterns</a></li>\n    <li><a class = 'nav-link' routerLink = \"/rest\">REST</a></li>\n    <li><a class = 'nav-link' routerLink = \"/json\">JSON</a></li>\n    <li><a class = 'nav-link' routerLink = \"/testing\">Testing</a></li>\n    <li><a class = 'nav-link' routerLink = \"/springboot\">Spring Boot</a></li>\n    <li><a class = 'nav-link' routerLink = \"/kafka\">Kafka</a></li>\n    <li><a class = 'nav-link' routerLink = \"/security\">Security</a></li>   \n    \n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring Core</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring Data</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring MVC</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring AOP</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring Integration</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring Testing</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring JPA</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring Cloud</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Spring Security</a></li>\n\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Hibernate</a></li>\n    \n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">SQL</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Unit Testing</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Maven</a></li>\n    <li><a class = 'nav-link' routerLink = \"/bootstrap\">Dockers</a></li>\n  </ul>\n  </nav>\n  <router-outlet></router-outlet>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-veracode',\n  templateUrl: './veracode.component.html',\n  styleUrls: ['./veracode.component.css']\n})\nexport class VeracodeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Veracode is a cloud based solution for application security\nStatic analysis, compiled byte code (SAST – Satic Application security testing)\nDynamic analysis (DAST )\nIntercative Analysis (IAST)\nSoftware composition Analysis (SCA) and penetration testing\n\n</pre>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { JavaComponent } from './java/java.component';\nimport { MicroservicesComponent } from './microservices/microservices.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport { JavaloggingComponent } from './javalogging/javalogging.component';\nimport { AwsComponent } from './aws/aws.component';\nimport { GitlabComponent } from './gitlab/gitlab.component';\nimport { VeracodeComponent } from './veracode/veracode.component';\nimport { SonarqubeComponent } from './sonarqube/sonarqube.component';\nimport { ApitestingComponent } from './apitesting/apitesting.component';\nimport { SolidComponent } from './solid/solid.component';\nimport { CodereviewComponent } from './codereview/codereview.component';\nimport { DesignpatternsComponent } from './designpatterns/designpatterns.component';\nimport { RestComponent } from './rest/rest.component';\nimport { JsonComponent } from './json/json.component';\nimport { TestingComponent } from './testing/testing.component';\nimport { SpringbootComponent } from './springboot/springboot.component';\nimport { KafkaComponent } from './kafka/kafka.component';\nimport { SecurityComponent } from './security/security.component';\nimport { MultithreadingComponent } from './multithreading/multithreading.component';\nimport { AngularComponent } from './angular/angular.component';\nimport { Html5Component } from './html5/html5.component';\nimport { JavascriptComponent } from './javascript/javascript.component';\nimport { CssComponent } from './css/css.component';\nimport { BootstrapComponent } from './bootstrap/bootstrap.component';\nimport { JavaioComponent } from './javaio/javaio.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    JavaComponent,\n    MicroservicesComponent,\n    WelcomeComponent,\n    JavaloggingComponent,\n    AwsComponent,\n    GitlabComponent,\n    VeracodeComponent,\n    SonarqubeComponent,\n    ApitestingComponent,\n    SolidComponent,\n    CodereviewComponent,\n    DesignpatternsComponent,\n    RestComponent,\n    JsonComponent,\n    SpringbootComponent,\n    KafkaComponent,\n    SecurityComponent,\n    MultithreadingComponent,\n    AngularComponent,\n    Html5Component,\n    JavascriptComponent,\n    CssComponent,\n    BootstrapComponent,\n    JavaioComponent\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot([\n      {path: 'java', \n      component: JavaComponent,\n      children: [\n        {path:'designpatterns', component: DesignpatternsComponent},\n        {path:'multithreading', component: MultithreadingComponent},\n        {path: 'javaio', component:JavaioComponent}\n      ]\n    },\n      {path: 'microservices', component: MicroservicesComponent},\n      {path:'javalogging', component: JavaloggingComponent},\n      {path:'aws', component: AwsComponent},\n      {path:'gitlab', component: GitlabComponent},\n      {path:'veracode', component: VeracodeComponent},\n      {path:'sonarqube', component: SonarqubeComponent},\n      {path:'apitesting', component: ApitestingComponent},\n      {path:'solid', component: SolidComponent},\n      {path:'codereview', component: CodereviewComponent},\n      {path:'multithreading', component: MultithreadingComponent},\n      {path:'rest', component: RestComponent},\n      {path:'json', component: JsonComponent},\n      {path:'testing', component: TestingComponent},\n      {path:'springboot', component: SpringbootComponent},\n      {path:'kafka', component: KafkaComponent},\n      {path:'security', component: SecurityComponent},\n      \n      {path:'angular', component: AngularComponent},\n      {path:'html5', component: Html5Component},\n      {path:'javascript', component: JavascriptComponent},\n      {path:'css', component: CssComponent},\n      {path:'bootstrap', component: BootstrapComponent},\n      {path:'', component: WelcomeComponent}\n    ])\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-codereview',\n  templateUrl: './codereview.component.html',\n  styleUrls: ['./codereview.component.css']\n})\nexport class CodereviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    SQL Injection\n\n    Use parameterized Queries – Use prepared statement\n    Use JPA Criteria API\n    User Data sanitization\n    -\tWhitelist – set of valid input checklist\n    -\tBlacklist – Not valid input checklist\n    Non Functional Requirements\n    \n    Scalability\n    Availability\n    Reliability.\n    Recoverability.\n    Maintainability.\n    Serviceability.\n    Capacity\n    \n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-gitlab',\n  templateUrl: './gitlab.component.html',\n  styleUrls: ['./gitlab.component.css']\n})\nexport class GitlabComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Reposirtory as a project\nContains gitlab-ci.yml which takes care of stages and what needs to be done in each for CI/CD\n</pre>>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-aws',\n  templateUrl: './aws.component.html',\n  styleUrls: ['./aws.component.css']\n})\nexport class AwsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Users\nRoot User\nIAM User\n\nRoot user creates user groups and assigns policies\nCreates a user and assign user group\nEC2 is created using an AMI (image) IaaS(Infrastructure as a Service)\nService roles are automatically created when you need to connect from a service to different service\nCode commit – Repository\nCode Build – buildspec.yml – build commands\nBuilds and pushes it to a bucket in S3\nCode deploy – deploys the artifact from S3 bucket mentioned to the ec2 instance – deployappspec.yml\nKeypair\nTags\nCode pipeline – automated – cloudwatch\nCloudFormation – json with all the details\n\n</pre>>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-javaio',\n  templateUrl: './javaio.component.html',\n  styleUrls: ['./javaio.component.css']\n})\nexport class JavaioComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n\n    Byte streams - Input Stream\n    \n    ByteArrayoutputSTream, PipedInputSTream, FileInputSTream\n    \n    \n    OutsTream\n    \n    ByteArrayoutputSTream, PipedInputSTream, FIle Outout\n    \n    \n    Reader\n    CharArrayReader, StringReader, PipedReader, InputStreamReader(FileReader)\n    \n    WRiter\n    CharArrayWriter, StringReader, PipedReader, InputStreamReader(FileReader)\n    \n    chaining streams\n    inputstreamreader\n    \n    reader over inputstream\n    Classes available for customization\n    FilterReader, FIlterWriter, FilterInputSTream, FilterOutputSTream\n    \n    Accesing Files\n    \n    FileReader etc are deprectaed\n    \n    Direct fiel access inefficient\n    Use BufferedStreams\n    Buffers content in memory\n    Performs reads/writes in large chunks\n    reduces underlying stream interaction\n    BufferedReader, etc\n    \n    BufferedReader br = new BufferedReader(new FileReader(\"file.txt\"))\n    \n    useful for linebreaks\n    \n    newLine()\n    readLine()\n    \n    \n    NIO classes\n    \n    Path ad Paths\n    \n    Paths.get()\n    \n    BufferedReader br = Files.newBufferedReader(Paths.get(\"file.txt\"))\n    <!--List<String> lines = Files.readAllLines(Paths.get())-->\n    \n    Zip file system\n    \n    \n    Conversion\n    Integer.parseInt()\n    Integer.valueOf()\n    Float.parseFloat()\n    Double.parseDouble()\n    Long.pareLong()\n    \n    Date Conversion\n    SimpleDateFormat and DateFormat\n    Date date1=new SimpleDateFormat(\"dd/MM/yyyy\").parse(sDate1);  \n    \n     SimpleDateFormat formatter1=new SimpleDateFormat(\"dd/MM/yyyy\");  \n     Date d = formatter.parse(String)\n     \n     \n     Date to String\n     \n     Date date = Calendar.getInstance().getTime();  \n    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd hh:mm:ss\");  \n    String strDate = dateFormat.format(date);  \n    \n    \n    date = SimpleDateFormat(stringformat).parse(string)\n    \n    string = simpledateFormat(dateformat).format(date)\n    \n    \n    String to char\n    \n    char c=s.charAt(0);\n    char[] ch=s1.toCharArray();    \n    <!--for(int i=0;i<ch.length;i++){    \n    System.out.println(\"char\"+ at \"+i+\" index is: \"+ch[i]);   \n    }  -->\n    \n    \n    \n    </pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-designpatterns',\n  templateUrl: './designpatterns.component.html',\n  styleUrls: ['./designpatterns.component.css']\n})\nexport class DesignpatternsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n    Creational\nSingleton\nPrototype\nBuilder\nFactory\nAbstract Factory\nObject Pool Pattern\nStructural \nAdapter\nTo connect new code to legacy code without changing the working contract of legacy code\nLike a plug adapter\nCan have multiple adapters\nConvert interface to other interface\nClient, adapter, adaptee\nEx: Arrays.asList()\nBridge\nSimilar to adapter but bridge works with new code\nDecouple abstraction and implementation using encapsulation, composition, inheritance\nChanges in abstraction wont affect the client\nDetails are not available initially\nEx:JDBC drivers\nComposite\nHierarchical type pattern that deals with tree structure of information\nComponents represent part or whole of structure\nObj in tree structures\nInd object treated as composite\nSame operations on individual and composites\nEx: component, java.awt\nDecorator\nHierarchical type pattern with functionality at each level while using composition from similar datatypes\nWrap another object and add functionality to it\nAdd behavior without affecting others\nMore than inheritance\nSRP\nEx: InputStream\nInheritance based\nUtilizes composition and inheritance(is-a and has-a)\nFaçade\nTo overcome poorly designed api\nReduces dependencies on outside code\nSimplify client usage\nRefactoring pattern\n1.\tFlyweight\nTo reduce the number of objects created\nString\n2.\tFilter\n3.\tProxy\nBehavioral\n1.\tChain of responsibility\n2.\tCommand\n3.\tInterpreter\n4.\tIterator\n5.\tMediator\n6.\tMomento\n7.\tObserver\n8.\tState\n9.\tStrategy\n10.\tTemplate\n11.\tVisitor\n12.\tNull Object\n\nJ2EE Patterns\nPresentation Layer\n1.\tIntercepting Filter\n2.\tFront controller \n3.\tView Helper\n4.\tComposite View\nBusiness Layer\n1.\tBusiness Delegate\n2.\tService Locator\n3.\tSession Façade\n4.\tTransfer Object\nIntegration Layer\n1.\tData Access Object\n2.\tWeb Service Broker\n\n1.\tMVC\n2.\tComposite Entity\n\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-angular',\n  templateUrl: './angular.component.html',\n  styleUrls: ['./angular.component.css']\n})\nexport class AngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<a href=\"currentPage#sectionA\">Section A</a>\n<a href=\"currentPage#sectionB\">Section B</a>\n<a href=\"currentPage#sectionC\">Section C</a>\n\n<pre>\n<b id = sectionA>Linting</b>\nLint\nPointing out and fixing potential probs in code\nCoding style changes\nMissing semicolons\nDouble vs single quotes\nLong lines\nESlint\nPrettier\nAutomatically fixes\n\n<b id = \"sectionA\">Routing</b>\n\nClickon a link\n<!--[routerLink] = [“/path”]-->\nRouter configuration has path define\n<!--{path: ‘path’, component: ‘component’}-->\nLoads component template in primary routeroutlet\n<!--<router-outlet>>/router-outlet>-->\n\n    Router outlet gets triggered when Url is changed\nChecks for matching path – reprocess redirects\nProcess guards\nResolve data\nActivates components\nDisplay templates\nChanging basepath during deployment\nNg build –base-href /APM/\n\nRouterModule\nDirective: RouterLink, RouterLinkActive, RouterOutlet\n\nInMemoryWebApiModule.forRoot() – simulate calls to server\n<!--{path: ‘’, redirectTo : ‘welcome’, pathMatch: ‘full’} -->\nRedirects are not chained\n\n\n<!--RouterModule.forRoot([\n{path: “”, component: “”}\n])-->\nUse forRoot  only once in application\nUse forChild for any feature routes\nurl segment in deeplinking\nDeeplinking – bookmark url and navigate to template of comp\n<!--[routerLink]: “[‘/path]” – first is parent or root url segment, all others are route parameters or additnl url segements\nrouterOutlet\n\nURL’s\nHTML5 based\nHash based - /#/path – url fragment – no need for url reqriting\n\nResolved client side \n\nLevergaes HTML5 history pushstate – without making server calls\nConfigure Url rewriting to prevent 404 after server call\nFeature Routing\n\nRouterModule.forChild([ define paths])\n\nRouter outlet will be same\nLinks will refer to the path \n\nActiavting route with code\nWe need Router service  - inject service in constructor\nThis.router.navigate([‘/path’])\nnavigateByUrl – to clear all the url segments\nHave all feature modules imported in appmodule to navigate across feature routes\nRoot/ parent Routes are ordered after feature routes in imports array\nRouting Modules\nNew module forRoot\nExport RouterModule,\n\nRouter \nActivatedRoute to read parameters\nRoute.snapshot.paramMap\n\nUse snapshot when parameters wont change\nIf parameters change use ActivatedRoute to subscribe \nQuery Parameters -->\n<!--[QueryParams] = “{filterBy = listFileter, showImage = Showimg}” beow routerLink and in router.navigate\n{\nqueryParams: {}\n}-->\n\nTo preserve queryParamsHandling = “preserve or merge”\nPrefetching data\nRoute’s data property for static data\nRoute resolver\nPage is not displayed until data is fetched\n\nCommunication\n\nCommunication with template\nViewchild and viewchildren\nWith child comp\nWith parent comp\nThrough service\nThrough state management service\nThrough service notifications\nUsing router\nComponent to template\nInterpoation <!--{{}}-->\nProperty binding img [style.width.px] = ‘image.width’\n\nTemplate -component\nTwo way binding – long way\nGetter and setter\nViewchild\n\n<!--Event binding\n(click) = myFunc()\nTwo way binding\n[(ngModel)] = ‘listFilter’ listfilter prop in comp\nSafenavigation operator ?  for null\nTemplatereferencevariable – use in ngAfterViewInit\n\n@ViewChild(‘templateRefVar’) newVar : ElementRef(type returned)\n\nIf(this.newVar.nativeElement) console.log()\nSecuritythreat\nMultiple elements viewCHildren\n@ViewChildren(‘ref’) newRef : QueryList--><!--<ElementRef>-->\n\n\n<b>Http</b>\n\nMost front-end applications need to communicate with a server over the HTTP protocol, in order to download or upload data and access other back-end services. Angular provides a client HTTP API for Angular applications, the HttpClient service class in @angular/common/http.\n</pre>>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-microservices',\n  templateUrl: './microservices.component.html',\n  styleUrls: ['./microservices.component.css']\n})\nexport class MicroservicesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n\n\n    <b>API Gateway</b>\nZuul, Netty, Finagle\n<b>Service Registry:  </b>\nEureka, ZooKeeper, Consul\n<b>Circuit Breaker</b>\nHystrix, Jrugged\n<b>Monitoring</b>\nKibana, Grafana, Splunk\n<b>Metrics</b>\nDropWizrd, Spring Actuator, Promoetheus\n<b>Distributed Tracing</b>\nDapper, Htrace, Zipkin\n<b>Log Aggregation</b>\nLogstash, Splunk, PaperTrial\n<b>Containers</b>\nDocker, rkt\n<b>Orchestrators</b>\nKunernetes, Docker Swarm, Mesos\n<b>Load balancer</b>\nRibbon, Meraki\n<b>Security</b>\nOkta, Keycloak, Shero\n    <b>Data Consistency</b>\n\n\n    \nCAP Theorem – Consistency, Availability, Partition Tolerance\nAvailability or consistency\n\nACID- Atomicity, Conistency, Isolation, Durability\n\nTwo Phase commit Pattern\nACID is mandatory\nChoosing consistency\nTransaction manager manages transaction\nPrepare phase\nVoting phase \nNot in Microservices as of reliability on transaction manager, no voting response and timeout,\nCommit failure after successful vote\nPending transactions lock resources\nAvoid custom impl\nHas scaling out issues\nReduced throughput\nAnti pattern\n\n\nSaga Pattern\nTrading atomicity for availability and consistency\nChooses availability\nSplits transaction into many requests called saga\nTracks each request\nCentralized distributed transaction state\nUsing saga log\nOn fail we send compensate request and rollsback \nImplemented by Saga execution coordinator(SEC) – state machine\n\nRouting Slip Pattern\nManufacturing example\nSet of instructions attached to work\nDetermine process steps\n, attach to message, message routed in sequence\nNo state centralization\nEventual consistency\n\nBASE – Basic availability, soft state, eventual consistency\nMicroservice Elements\nDomain driven design\n\nData Store\nNo Distributed transaction – No two phase commit\nIt will have performance impact\nEventual consistency\nEvent sourcing – Akka, Kafka, RabbitMQ\nCapture Data Change – Debezium\nUser Interface \n\nUI aggregation is necessary so user feels it consistent\nServer side page composition\nClient side composition\nServices\n\nCommunication using Remote procedure invocation RPC – REST, SOAP, gRPC\nMessaging –\nMessage or Event\nBroker or channel\nPublish/Subscribe\nKafka, RabbitMQ\nMessage format – XML, YAML, JSON(Text) or Binary – gRPC\nExchanges using API’s and contracts – SOAP – WSDL, REST – Swagger, gRPC- IDL\nExternal configuration for diff env’s\nCan use DB or Archaius, Consul, Decider\nDistributed Services\n\nService Registry to discover services like a phone book\nEach Services registers on start up and deregister during shutdown\nEureka, ZooKeeper, Consul\nCORS comes into picture , should use HTTP headers(Access-control-Allow-Origin)\nCircuit breaker during network issues\nInvoke via proxy in order to deviate calls if needed\nHystrix, Jrugged\nGateway\nFor clients to access individual  multiple services, and has unified interface\nSingle entry points\nHandles cross cutting concerns – Authentication, Authorization\nIdeal place to handle API transaltaion\nZuul, Netty, Finagle\n\nSecurity\nIdentity and Access Management System IAM\nProvides single sign on\nKerberos, OpenID , Oauth 2.0, SAML - protocols\nOkta, Keycloak, Shero\nIdentity through access token\nJWT, Cookie\n\nScalability and Availability\nVertical scale – add more power to existing infra – more CPU and RAm\nHorizontal – more machines – service replications, clustering – client load balancing\nLoad balancer – Round robin, based on weight , capacity\nRibbon, Meraki – load balancing tools\n\nMonitoring\nNeeds dashboard\nKibana, Grafana, Splunk\nHealth check – Heart bits\nLog Aggregation\nLogstash, Splunk, PaperTrial\nException Tracking\nRecord exceptions in centralized\nMetrics\nDropWizrd, Spring Actuator, Promoetheus\nAuditing\n<b>Rate Limiting</b>Rate Limiting\nControl API usage\nDefend DoS attacks – Limit traffic from particular source\nMonetize api’s\nAlerting\nDistributed Tracing\nTrace entire request using correlation id\nDapper, Htrace, Zipkin\nDeployment\n\nContainers\nDocker, rkt\nOrchestrators\nOrchestrate containers – Kunernetes, Docker Swarm, Mesos\nContinuous Delivery – Jenkins, Asgard, Aminator\n\nBrown Field Microservices approach\nOld monolith to micro\nGreenField Microservices\nNew system or application\n\n\n\n\n</pre>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-testing',\n  templateUrl: './testing.component.html',\n  styleUrls: ['./testing.component.css']\n})\nexport class TestingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<pre>\n\n    Testing Types\n\nSmoke or Sanity Tests\nContinuos Testing\nRegression Testing\nPerformance Testing\nAcceptance Testing\n\nTesting Levels\nUnits Tests\nIntegration Tests\nSystem Testing\n\nTesting Frameworks\nJunit\nSpring Test\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@Test\nAssertJ\nHamcrest\nMatcher Library\nJSON Path\nXpath for JSOn\nMockito \nMocking framework\n\n</pre>>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}